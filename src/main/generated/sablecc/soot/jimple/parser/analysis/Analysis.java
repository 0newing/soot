/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.analysis;

import soot.jimple.parser.node.AAbstractModifier;
import soot.jimple.parser.node.AAndBinop;
import soot.jimple.parser.node.AAnnotationModifier;
import soot.jimple.parser.node.AArrayBrackets;
import soot.jimple.parser.node.AArrayDescriptor;
import soot.jimple.parser.node.AArrayNewExpr;
import soot.jimple.parser.node.AArrayReference;
import soot.jimple.parser.node.AAssignStatement;
import soot.jimple.parser.node.ABaseNonvoidType;
import soot.jimple.parser.node.ABinopBoolExpr;
import soot.jimple.parser.node.ABinopExpr;
import soot.jimple.parser.node.ABinopExpression;
import soot.jimple.parser.node.ABooleanBaseType;
import soot.jimple.parser.node.ABooleanBaseTypeNoName;
import soot.jimple.parser.node.ABreakpointStatement;
import soot.jimple.parser.node.AByteBaseType;
import soot.jimple.parser.node.AByteBaseTypeNoName;
import soot.jimple.parser.node.ACaseStmt;
import soot.jimple.parser.node.ACastExpression;
import soot.jimple.parser.node.ACatchClause;
import soot.jimple.parser.node.ACharBaseType;
import soot.jimple.parser.node.ACharBaseTypeNoName;
import soot.jimple.parser.node.AClassFileType;
import soot.jimple.parser.node.AClassNameBaseType;
import soot.jimple.parser.node.AClassNameMultiClassNameList;
import soot.jimple.parser.node.AClassNameSingleClassNameList;
import soot.jimple.parser.node.AClzzConstant;
import soot.jimple.parser.node.ACmpBinop;
import soot.jimple.parser.node.ACmpeqBinop;
import soot.jimple.parser.node.ACmpgBinop;
import soot.jimple.parser.node.ACmpgeBinop;
import soot.jimple.parser.node.ACmpgtBinop;
import soot.jimple.parser.node.ACmplBinop;
import soot.jimple.parser.node.ACmpleBinop;
import soot.jimple.parser.node.ACmpltBinop;
import soot.jimple.parser.node.ACmpneBinop;
import soot.jimple.parser.node.AConstantCaseLabel;
import soot.jimple.parser.node.AConstantImmediate;
import soot.jimple.parser.node.ADeclaration;
import soot.jimple.parser.node.ADefaultCaseLabel;
import soot.jimple.parser.node.ADivBinop;
import soot.jimple.parser.node.ADoubleBaseType;
import soot.jimple.parser.node.ADoubleBaseTypeNoName;
import soot.jimple.parser.node.ADynamicInvokeExpr;
import soot.jimple.parser.node.AEmptyMethodBody;
import soot.jimple.parser.node.AEntermonitorStatement;
import soot.jimple.parser.node.AEnumModifier;
import soot.jimple.parser.node.AExitmonitorStatement;
import soot.jimple.parser.node.AExtendsClause;
import soot.jimple.parser.node.AFieldMember;
import soot.jimple.parser.node.AFieldReference;
import soot.jimple.parser.node.AFieldSignature;
import soot.jimple.parser.node.AFile;
import soot.jimple.parser.node.AFileBody;
import soot.jimple.parser.node.AFinalModifier;
import soot.jimple.parser.node.AFixedArrayDescriptor;
import soot.jimple.parser.node.AFloatBaseType;
import soot.jimple.parser.node.AFloatBaseTypeNoName;
import soot.jimple.parser.node.AFloatConstant;
import soot.jimple.parser.node.AFullIdentClassName;
import soot.jimple.parser.node.AFullIdentNonvoidType;
import soot.jimple.parser.node.AFullMethodBody;
import soot.jimple.parser.node.AGotoStatement;
import soot.jimple.parser.node.AGotoStmt;
import soot.jimple.parser.node.AIdentArrayRef;
import soot.jimple.parser.node.AIdentClassName;
import soot.jimple.parser.node.AIdentName;
import soot.jimple.parser.node.AIdentNonvoidType;
import soot.jimple.parser.node.AIdentityNoTypeStatement;
import soot.jimple.parser.node.AIdentityStatement;
import soot.jimple.parser.node.AIfStatement;
import soot.jimple.parser.node.AImmediateExpression;
import soot.jimple.parser.node.AImplementsClause;
import soot.jimple.parser.node.AInstanceofExpression;
import soot.jimple.parser.node.AIntBaseType;
import soot.jimple.parser.node.AIntBaseTypeNoName;
import soot.jimple.parser.node.AIntegerConstant;
import soot.jimple.parser.node.AInterfaceFileType;
import soot.jimple.parser.node.AInterfaceNonstaticInvoke;
import soot.jimple.parser.node.AInvokeExpression;
import soot.jimple.parser.node.AInvokeStatement;
import soot.jimple.parser.node.ALabelName;
import soot.jimple.parser.node.ALabelStatement;
import soot.jimple.parser.node.ALengthofUnop;
import soot.jimple.parser.node.ALocalFieldRef;
import soot.jimple.parser.node.ALocalImmediate;
import soot.jimple.parser.node.ALocalName;
import soot.jimple.parser.node.ALocalVariable;
import soot.jimple.parser.node.ALongBaseType;
import soot.jimple.parser.node.ALongBaseTypeNoName;
import soot.jimple.parser.node.ALookupswitchStatement;
import soot.jimple.parser.node.AMethodMember;
import soot.jimple.parser.node.AMethodSignature;
import soot.jimple.parser.node.AMinusBinop;
import soot.jimple.parser.node.AModBinop;
import soot.jimple.parser.node.AMultBinop;
import soot.jimple.parser.node.AMultiArgList;
import soot.jimple.parser.node.AMultiLocalNameList;
import soot.jimple.parser.node.AMultiNameList;
import soot.jimple.parser.node.AMultiNewExpr;
import soot.jimple.parser.node.AMultiParameterList;
import soot.jimple.parser.node.ANativeModifier;
import soot.jimple.parser.node.ANegUnop;
import soot.jimple.parser.node.ANewExpression;
import soot.jimple.parser.node.ANonstaticInvokeExpr;
import soot.jimple.parser.node.ANonvoidJimpleType;
import soot.jimple.parser.node.ANopStatement;
import soot.jimple.parser.node.ANovoidType;
import soot.jimple.parser.node.ANullBaseType;
import soot.jimple.parser.node.ANullBaseTypeNoName;
import soot.jimple.parser.node.ANullConstant;
import soot.jimple.parser.node.AOrBinop;
import soot.jimple.parser.node.AParameter;
import soot.jimple.parser.node.APlusBinop;
import soot.jimple.parser.node.APrivateModifier;
import soot.jimple.parser.node.AProtectedModifier;
import soot.jimple.parser.node.APublicModifier;
import soot.jimple.parser.node.AQuotedArrayRef;
import soot.jimple.parser.node.AQuotedClassName;
import soot.jimple.parser.node.AQuotedName;
import soot.jimple.parser.node.AQuotedNonvoidType;
import soot.jimple.parser.node.AReferenceExpression;
import soot.jimple.parser.node.AReferenceVariable;
import soot.jimple.parser.node.ARetStatement;
import soot.jimple.parser.node.AReturnStatement;
import soot.jimple.parser.node.AShlBinop;
import soot.jimple.parser.node.AShortBaseType;
import soot.jimple.parser.node.AShortBaseTypeNoName;
import soot.jimple.parser.node.AShrBinop;
import soot.jimple.parser.node.ASigFieldRef;
import soot.jimple.parser.node.ASimpleNewExpr;
import soot.jimple.parser.node.ASingleArgList;
import soot.jimple.parser.node.ASingleLocalNameList;
import soot.jimple.parser.node.ASingleNameList;
import soot.jimple.parser.node.ASingleParameterList;
import soot.jimple.parser.node.ASpecialNonstaticInvoke;
import soot.jimple.parser.node.AStaticInvokeExpr;
import soot.jimple.parser.node.AStaticModifier;
import soot.jimple.parser.node.AStrictfpModifier;
import soot.jimple.parser.node.AStringConstant;
import soot.jimple.parser.node.ASynchronizedModifier;
import soot.jimple.parser.node.ATableswitchStatement;
import soot.jimple.parser.node.AThrowStatement;
import soot.jimple.parser.node.AThrowsClause;
import soot.jimple.parser.node.ATransientModifier;
import soot.jimple.parser.node.AUnknownJimpleType;
import soot.jimple.parser.node.AUnnamedMethodSignature;
import soot.jimple.parser.node.AUnopBoolExpr;
import soot.jimple.parser.node.AUnopExpr;
import soot.jimple.parser.node.AUnopExpression;
import soot.jimple.parser.node.AUshrBinop;
import soot.jimple.parser.node.AVirtualNonstaticInvoke;
import soot.jimple.parser.node.AVoidType;
import soot.jimple.parser.node.AVolatileModifier;
import soot.jimple.parser.node.AXorBinop;
import soot.jimple.parser.node.EOF;
import soot.jimple.parser.node.Node;
import soot.jimple.parser.node.Start;
import soot.jimple.parser.node.Switch;
import soot.jimple.parser.node.TAbstract;
import soot.jimple.parser.node.TAnd;
import soot.jimple.parser.node.TAnnotation;
import soot.jimple.parser.node.TAtIdentifier;
import soot.jimple.parser.node.TBoolConstant;
import soot.jimple.parser.node.TBoolean;
import soot.jimple.parser.node.TBreakpoint;
import soot.jimple.parser.node.TByte;
import soot.jimple.parser.node.TCase;
import soot.jimple.parser.node.TCatch;
import soot.jimple.parser.node.TChar;
import soot.jimple.parser.node.TClass;
import soot.jimple.parser.node.TCls;
import soot.jimple.parser.node.TCmp;
import soot.jimple.parser.node.TCmpeq;
import soot.jimple.parser.node.TCmpg;
import soot.jimple.parser.node.TCmpge;
import soot.jimple.parser.node.TCmpgt;
import soot.jimple.parser.node.TCmpl;
import soot.jimple.parser.node.TCmple;
import soot.jimple.parser.node.TCmplt;
import soot.jimple.parser.node.TCmpne;
import soot.jimple.parser.node.TColon;
import soot.jimple.parser.node.TColonEquals;
import soot.jimple.parser.node.TComma;
import soot.jimple.parser.node.TDefault;
import soot.jimple.parser.node.TDiv;
import soot.jimple.parser.node.TDot;
import soot.jimple.parser.node.TDouble;
import soot.jimple.parser.node.TDynamicinvoke;
import soot.jimple.parser.node.TEntermonitor;
import soot.jimple.parser.node.TEnum;
import soot.jimple.parser.node.TEquals;
import soot.jimple.parser.node.TExitmonitor;
import soot.jimple.parser.node.TExtends;
import soot.jimple.parser.node.TFinal;
import soot.jimple.parser.node.TFloat;
import soot.jimple.parser.node.TFloatConstant;
import soot.jimple.parser.node.TFrom;
import soot.jimple.parser.node.TFullIdentifier;
import soot.jimple.parser.node.TGoto;
import soot.jimple.parser.node.TIdentifier;
import soot.jimple.parser.node.TIf;
import soot.jimple.parser.node.TIgnored;
import soot.jimple.parser.node.TImplements;
import soot.jimple.parser.node.TInstanceof;
import soot.jimple.parser.node.TInt;
import soot.jimple.parser.node.TIntegerConstant;
import soot.jimple.parser.node.TInterface;
import soot.jimple.parser.node.TInterfaceinvoke;
import soot.jimple.parser.node.TLBrace;
import soot.jimple.parser.node.TLBracket;
import soot.jimple.parser.node.TLParen;
import soot.jimple.parser.node.TLengthof;
import soot.jimple.parser.node.TLong;
import soot.jimple.parser.node.TLookupswitch;
import soot.jimple.parser.node.TMinus;
import soot.jimple.parser.node.TMod;
import soot.jimple.parser.node.TMult;
import soot.jimple.parser.node.TNative;
import soot.jimple.parser.node.TNeg;
import soot.jimple.parser.node.TNew;
import soot.jimple.parser.node.TNewarray;
import soot.jimple.parser.node.TNewmultiarray;
import soot.jimple.parser.node.TNop;
import soot.jimple.parser.node.TNull;
import soot.jimple.parser.node.TNullType;
import soot.jimple.parser.node.TOr;
import soot.jimple.parser.node.TPlus;
import soot.jimple.parser.node.TPrivate;
import soot.jimple.parser.node.TProtected;
import soot.jimple.parser.node.TPublic;
import soot.jimple.parser.node.TQuote;
import soot.jimple.parser.node.TQuotedName;
import soot.jimple.parser.node.TRBrace;
import soot.jimple.parser.node.TRBracket;
import soot.jimple.parser.node.TRParen;
import soot.jimple.parser.node.TRet;
import soot.jimple.parser.node.TReturn;
import soot.jimple.parser.node.TSemicolon;
import soot.jimple.parser.node.TShl;
import soot.jimple.parser.node.TShort;
import soot.jimple.parser.node.TShr;
import soot.jimple.parser.node.TSpecialinvoke;
import soot.jimple.parser.node.TStatic;
import soot.jimple.parser.node.TStaticinvoke;
import soot.jimple.parser.node.TStrictfp;
import soot.jimple.parser.node.TStringConstant;
import soot.jimple.parser.node.TSynchronized;
import soot.jimple.parser.node.TTableswitch;
import soot.jimple.parser.node.TThrow;
import soot.jimple.parser.node.TThrows;
import soot.jimple.parser.node.TTo;
import soot.jimple.parser.node.TTransient;
import soot.jimple.parser.node.TUnknown;
import soot.jimple.parser.node.TUshr;
import soot.jimple.parser.node.TVirtualinvoke;
import soot.jimple.parser.node.TVoid;
import soot.jimple.parser.node.TVolatile;
import soot.jimple.parser.node.TWith;
import soot.jimple.parser.node.TXor;

public interface Analysis extends Switch {
  Object getIn(Node node);

  void setIn(Node node, Object o);

  Object getOut(Node node);

  void setOut(Node node, Object o);

  void caseStart(Start node);

  void caseAFile(AFile node);

  void caseAAbstractModifier(AAbstractModifier node);

  void caseAFinalModifier(AFinalModifier node);

  void caseANativeModifier(ANativeModifier node);

  void caseAPublicModifier(APublicModifier node);

  void caseAProtectedModifier(AProtectedModifier node);

  void caseAPrivateModifier(APrivateModifier node);

  void caseAStaticModifier(AStaticModifier node);

  void caseASynchronizedModifier(ASynchronizedModifier node);

  void caseATransientModifier(ATransientModifier node);

  void caseAVolatileModifier(AVolatileModifier node);

  void caseAStrictfpModifier(AStrictfpModifier node);

  void caseAEnumModifier(AEnumModifier node);

  void caseAAnnotationModifier(AAnnotationModifier node);

  void caseAClassFileType(AClassFileType node);

  void caseAInterfaceFileType(AInterfaceFileType node);

  void caseAExtendsClause(AExtendsClause node);

  void caseAImplementsClause(AImplementsClause node);

  void caseAFileBody(AFileBody node);

  void caseASingleNameList(ASingleNameList node);

  void caseAMultiNameList(AMultiNameList node);

  void caseAClassNameSingleClassNameList(AClassNameSingleClassNameList node);

  void caseAClassNameMultiClassNameList(AClassNameMultiClassNameList node);

  void caseAFieldMember(AFieldMember node);

  void caseAMethodMember(AMethodMember node);

  void caseAVoidType(AVoidType node);

  void caseANovoidType(ANovoidType node);

  void caseASingleParameterList(ASingleParameterList node);

  void caseAMultiParameterList(AMultiParameterList node);

  void caseAParameter(AParameter node);

  void caseAThrowsClause(AThrowsClause node);

  void caseABooleanBaseTypeNoName(ABooleanBaseTypeNoName node);

  void caseAByteBaseTypeNoName(AByteBaseTypeNoName node);

  void caseACharBaseTypeNoName(ACharBaseTypeNoName node);

  void caseAShortBaseTypeNoName(AShortBaseTypeNoName node);

  void caseAIntBaseTypeNoName(AIntBaseTypeNoName node);

  void caseALongBaseTypeNoName(ALongBaseTypeNoName node);

  void caseAFloatBaseTypeNoName(AFloatBaseTypeNoName node);

  void caseADoubleBaseTypeNoName(ADoubleBaseTypeNoName node);

  void caseANullBaseTypeNoName(ANullBaseTypeNoName node);

  void caseABooleanBaseType(ABooleanBaseType node);

  void caseAByteBaseType(AByteBaseType node);

  void caseACharBaseType(ACharBaseType node);

  void caseAShortBaseType(AShortBaseType node);

  void caseAIntBaseType(AIntBaseType node);

  void caseALongBaseType(ALongBaseType node);

  void caseAFloatBaseType(AFloatBaseType node);

  void caseADoubleBaseType(ADoubleBaseType node);

  void caseANullBaseType(ANullBaseType node);

  void caseAClassNameBaseType(AClassNameBaseType node);

  void caseABaseNonvoidType(ABaseNonvoidType node);

  void caseAQuotedNonvoidType(AQuotedNonvoidType node);

  void caseAIdentNonvoidType(AIdentNonvoidType node);

  void caseAFullIdentNonvoidType(AFullIdentNonvoidType node);

  void caseAArrayBrackets(AArrayBrackets node);

  void caseAEmptyMethodBody(AEmptyMethodBody node);

  void caseAFullMethodBody(AFullMethodBody node);

  void caseADeclaration(ADeclaration node);

  void caseAUnknownJimpleType(AUnknownJimpleType node);

  void caseANonvoidJimpleType(ANonvoidJimpleType node);

  void caseALocalName(ALocalName node);

  void caseASingleLocalNameList(ASingleLocalNameList node);

  void caseAMultiLocalNameList(AMultiLocalNameList node);

  void caseALabelStatement(ALabelStatement node);

  void caseABreakpointStatement(ABreakpointStatement node);

  void caseAEntermonitorStatement(AEntermonitorStatement node);

  void caseAExitmonitorStatement(AExitmonitorStatement node);

  void caseATableswitchStatement(ATableswitchStatement node);

  void caseALookupswitchStatement(ALookupswitchStatement node);

  void caseAIdentityStatement(AIdentityStatement node);

  void caseAIdentityNoTypeStatement(AIdentityNoTypeStatement node);

  void caseAAssignStatement(AAssignStatement node);

  void caseAIfStatement(AIfStatement node);

  void caseAGotoStatement(AGotoStatement node);

  void caseANopStatement(ANopStatement node);

  void caseARetStatement(ARetStatement node);

  void caseAReturnStatement(AReturnStatement node);

  void caseAThrowStatement(AThrowStatement node);

  void caseAInvokeStatement(AInvokeStatement node);

  void caseALabelName(ALabelName node);

  void caseACaseStmt(ACaseStmt node);

  void caseAConstantCaseLabel(AConstantCaseLabel node);

  void caseADefaultCaseLabel(ADefaultCaseLabel node);

  void caseAGotoStmt(AGotoStmt node);

  void caseACatchClause(ACatchClause node);

  void caseANewExpression(ANewExpression node);

  void caseACastExpression(ACastExpression node);

  void caseAInstanceofExpression(AInstanceofExpression node);

  void caseAInvokeExpression(AInvokeExpression node);

  void caseAReferenceExpression(AReferenceExpression node);

  void caseABinopExpression(ABinopExpression node);

  void caseAUnopExpression(AUnopExpression node);

  void caseAImmediateExpression(AImmediateExpression node);

  void caseASimpleNewExpr(ASimpleNewExpr node);

  void caseAArrayNewExpr(AArrayNewExpr node);

  void caseAMultiNewExpr(AMultiNewExpr node);

  void caseAArrayDescriptor(AArrayDescriptor node);

  void caseAReferenceVariable(AReferenceVariable node);

  void caseALocalVariable(ALocalVariable node);

  void caseABinopBoolExpr(ABinopBoolExpr node);

  void caseAUnopBoolExpr(AUnopBoolExpr node);

  void caseANonstaticInvokeExpr(ANonstaticInvokeExpr node);

  void caseAStaticInvokeExpr(AStaticInvokeExpr node);

  void caseADynamicInvokeExpr(ADynamicInvokeExpr node);

  void caseABinopExpr(ABinopExpr node);

  void caseAUnopExpr(AUnopExpr node);

  void caseASpecialNonstaticInvoke(ASpecialNonstaticInvoke node);

  void caseAVirtualNonstaticInvoke(AVirtualNonstaticInvoke node);

  void caseAInterfaceNonstaticInvoke(AInterfaceNonstaticInvoke node);

  void caseAUnnamedMethodSignature(AUnnamedMethodSignature node);

  void caseAMethodSignature(AMethodSignature node);

  void caseAArrayReference(AArrayReference node);

  void caseAFieldReference(AFieldReference node);

  void caseAIdentArrayRef(AIdentArrayRef node);

  void caseAQuotedArrayRef(AQuotedArrayRef node);

  void caseALocalFieldRef(ALocalFieldRef node);

  void caseASigFieldRef(ASigFieldRef node);

  void caseAFieldSignature(AFieldSignature node);

  void caseAFixedArrayDescriptor(AFixedArrayDescriptor node);

  void caseASingleArgList(ASingleArgList node);

  void caseAMultiArgList(AMultiArgList node);

  void caseALocalImmediate(ALocalImmediate node);

  void caseAConstantImmediate(AConstantImmediate node);

  void caseAIntegerConstant(AIntegerConstant node);

  void caseAFloatConstant(AFloatConstant node);

  void caseAStringConstant(AStringConstant node);

  void caseAClzzConstant(AClzzConstant node);

  void caseANullConstant(ANullConstant node);

  void caseAAndBinop(AAndBinop node);

  void caseAOrBinop(AOrBinop node);

  void caseAXorBinop(AXorBinop node);

  void caseAModBinop(AModBinop node);

  void caseACmpBinop(ACmpBinop node);

  void caseACmpgBinop(ACmpgBinop node);

  void caseACmplBinop(ACmplBinop node);

  void caseACmpeqBinop(ACmpeqBinop node);

  void caseACmpneBinop(ACmpneBinop node);

  void caseACmpgtBinop(ACmpgtBinop node);

  void caseACmpgeBinop(ACmpgeBinop node);

  void caseACmpltBinop(ACmpltBinop node);

  void caseACmpleBinop(ACmpleBinop node);

  void caseAShlBinop(AShlBinop node);

  void caseAShrBinop(AShrBinop node);

  void caseAUshrBinop(AUshrBinop node);

  void caseAPlusBinop(APlusBinop node);

  void caseAMinusBinop(AMinusBinop node);

  void caseAMultBinop(AMultBinop node);

  void caseADivBinop(ADivBinop node);

  void caseALengthofUnop(ALengthofUnop node);

  void caseANegUnop(ANegUnop node);

  void caseAQuotedClassName(AQuotedClassName node);

  void caseAIdentClassName(AIdentClassName node);

  void caseAFullIdentClassName(AFullIdentClassName node);

  void caseAQuotedName(AQuotedName node);

  void caseAIdentName(AIdentName node);

  void caseTIgnored(TIgnored node);

  void caseTAbstract(TAbstract node);

  void caseTFinal(TFinal node);

  void caseTNative(TNative node);

  void caseTPublic(TPublic node);

  void caseTProtected(TProtected node);

  void caseTPrivate(TPrivate node);

  void caseTStatic(TStatic node);

  void caseTSynchronized(TSynchronized node);

  void caseTTransient(TTransient node);

  void caseTVolatile(TVolatile node);

  void caseTStrictfp(TStrictfp node);

  void caseTEnum(TEnum node);

  void caseTAnnotation(TAnnotation node);

  void caseTClass(TClass node);

  void caseTInterface(TInterface node);

  void caseTVoid(TVoid node);

  void caseTBoolean(TBoolean node);

  void caseTByte(TByte node);

  void caseTShort(TShort node);

  void caseTChar(TChar node);

  void caseTInt(TInt node);

  void caseTLong(TLong node);

  void caseTFloat(TFloat node);

  void caseTDouble(TDouble node);

  void caseTNullType(TNullType node);

  void caseTUnknown(TUnknown node);

  void caseTExtends(TExtends node);

  void caseTImplements(TImplements node);

  void caseTBreakpoint(TBreakpoint node);

  void caseTCase(TCase node);

  void caseTCatch(TCatch node);

  void caseTCmp(TCmp node);

  void caseTCmpg(TCmpg node);

  void caseTCmpl(TCmpl node);

  void caseTDefault(TDefault node);

  void caseTEntermonitor(TEntermonitor node);

  void caseTExitmonitor(TExitmonitor node);

  void caseTGoto(TGoto node);

  void caseTIf(TIf node);

  void caseTInstanceof(TInstanceof node);

  void caseTInterfaceinvoke(TInterfaceinvoke node);

  void caseTLengthof(TLengthof node);

  void caseTLookupswitch(TLookupswitch node);

  void caseTNeg(TNeg node);

  void caseTNew(TNew node);

  void caseTNewarray(TNewarray node);

  void caseTNewmultiarray(TNewmultiarray node);

  void caseTNop(TNop node);

  void caseTRet(TRet node);

  void caseTReturn(TReturn node);

  void caseTSpecialinvoke(TSpecialinvoke node);

  void caseTStaticinvoke(TStaticinvoke node);

  void caseTDynamicinvoke(TDynamicinvoke node);

  void caseTTableswitch(TTableswitch node);

  void caseTThrow(TThrow node);

  void caseTThrows(TThrows node);

  void caseTVirtualinvoke(TVirtualinvoke node);

  void caseTNull(TNull node);

  void caseTFrom(TFrom node);

  void caseTTo(TTo node);

  void caseTWith(TWith node);

  void caseTCls(TCls node);

  void caseTComma(TComma node);

  void caseTLBrace(TLBrace node);

  void caseTRBrace(TRBrace node);

  void caseTSemicolon(TSemicolon node);

  void caseTLBracket(TLBracket node);

  void caseTRBracket(TRBracket node);

  void caseTLParen(TLParen node);

  void caseTRParen(TRParen node);

  void caseTColon(TColon node);

  void caseTDot(TDot node);

  void caseTQuote(TQuote node);

  void caseTColonEquals(TColonEquals node);

  void caseTEquals(TEquals node);

  void caseTAnd(TAnd node);

  void caseTOr(TOr node);

  void caseTXor(TXor node);

  void caseTMod(TMod node);

  void caseTCmpeq(TCmpeq node);

  void caseTCmpne(TCmpne node);

  void caseTCmpgt(TCmpgt node);

  void caseTCmpge(TCmpge node);

  void caseTCmplt(TCmplt node);

  void caseTCmple(TCmple node);

  void caseTShl(TShl node);

  void caseTShr(TShr node);

  void caseTUshr(TUshr node);

  void caseTPlus(TPlus node);

  void caseTMinus(TMinus node);

  void caseTMult(TMult node);

  void caseTDiv(TDiv node);

  void caseTQuotedName(TQuotedName node);

  void caseTFullIdentifier(TFullIdentifier node);

  void caseTIdentifier(TIdentifier node);

  void caseTAtIdentifier(TAtIdentifier node);

  void caseTBoolConstant(TBoolConstant node);

  void caseTIntegerConstant(TIntegerConstant node);

  void caseTFloatConstant(TFloatConstant node);

  void caseTStringConstant(TStringConstant node);

  void caseEOF(EOF node);
}
